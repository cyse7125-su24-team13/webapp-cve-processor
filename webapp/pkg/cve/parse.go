package cve

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
	"time"
)

type CVERecord struct {
	CVEID         string    `json:"cveId"`
	JSONData      string    `json:"-"`
	DatePublished time.Time `json:"datePublished"`
	DateUpdated   time.Time `json:"dateUpdated"`
}

type CVEFile struct {
	CVEMetadata struct {
		CVEID         string `json:"cveId"`
		DatePublished string `json:"datePublished"`
		DateUpdated   string `json:"dateUpdated"`
	} `json:"cveMetadata"`
	Containers struct {
		CNA struct {
			// Add other fields as needed
		} `json:"cna"`
	} `json:"containers"`
}

func ParseCVEFile(filePath string) (CVERecord, error) {
	var cveFile CVEFile
	file, err := os.Open(filePath)
	if err != nil {
		log.Printf("Failed to open file: %v\n", err)
		return CVERecord{}, err
	}
	defer file.Close()

	byteValue, _ := ioutil.ReadAll(file)
	err = json.Unmarshal(byteValue, &cveFile)
	if err != nil {
		log.Printf("Failed to parse JSON: %v\n", err)
		return CVERecord{}, err
	}

	datePublished, _ := time.Parse(time.RFC3339, cveFile.CVEMetadata.DatePublished)
	dateUpdated, _ := time.Parse(time.RFC3339, cveFile.CVEMetadata.DateUpdated)

	return CVERecord{
		CVEID:         cveFile.CVEMetadata.CVEID,
		JSONData:      string(byteValue),
		DatePublished: datePublished,
		DateUpdated:   dateUpdated,
	}, nil
}
