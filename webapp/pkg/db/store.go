package db

import (
	"context"
	"encoding/json"
	"log"
	"mycveprocessor/pkg/cve"

	"github.com/jackc/pgx/v4"
)

// Check if a CVE record already exists
func recordExists(conn *pgx.Conn, cveID string, dateUpdated string) (bool, error) {
	var exists bool
	query := `
    SELECT EXISTS (
        SELECT 1
        FROM cve_records
        WHERE cve_id = $1 AND date_updated = $2
    );
    `
	err := conn.QueryRow(context.Background(), query, cveID, dateUpdated).Scan(&exists)
	if err != nil {
		return false, err
	}
	return exists, nil
}

func StoreCVERecord(conn *pgx.Conn, record cve.CVERecord) error {
	exists, err := recordExists(conn, record.CVEID, record.DateUpdated.String())
	if err != nil {
		log.Printf("Failed to check if record exists: %v\n", err)
		return err
	}

	if exists {
		log.Printf("Record already exists for CVE ID %s with date updated %s\n", record.CVEID, record.DateUpdated)
		return nil
	}

	jsonData, err := json.Marshal(record)
	if err != nil {
		log.Printf("Failed to marshal JSON: %v\n", err)
		return err
	}

	_, err = conn.Exec(context.Background(), `
    INSERT INTO cve_records (cve_id, json_data, date_published, date_updated)
    VALUES ($1, $2, $3, $4)
    `, record.CVEID, jsonData, record.DatePublished, record.DateUpdated)
	if err != nil {
		log.Printf("Failed to store CVE record: %v\n", err)
		return err
	}
	return nil
}
