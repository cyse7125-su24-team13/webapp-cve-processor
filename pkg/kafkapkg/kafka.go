package kafkapkg

import (
	"log"
	"os"

	"github.com/Shopify/sarama"
)

var (
	kafkaBrokers = []string{"kafka-broker-0.kafka-broker-headless.namespace2.svc.cluster.local:9092"}
)

// InitializeKafkaProducer initializes and returns a Kafka producer instance
func InitializeKafkaProducer() (sarama.SyncProducer, error) {
	config := sarama.NewConfig()
	config.Producer.Return.Successes = true // Ensure Producer.Return.Successes is set to true

	// SASL configuration
	config.Net.SASL.Enable = true
	config.Net.SASL.Mechanism = sarama.SASLTypeSCRAMSHA256
	config.Net.SASL.User = os.Getenv("KAFKA_SASL_USER")
	config.Net.SASL.Password = os.Getenv("KAFKA_SASL_PASSWORD")
	config.Net.SASL.Handshake = true
	config.Net.SASL.SCRAMClientGeneratorFunc = func() sarama.SCRAMClient { return &sarama.XDGSCRAMClient{HashGeneratorFcn: sarama.SHA256} }

	producer, err := sarama.NewSyncProducer(kafkaBrokers, config)
	if err != nil {
		return nil, err
	}

	return producer, nil
}

// SendJSONToKafka sends a JSON payload to a Kafka topic
func SendJSONToKafka(producer sarama.SyncProducer, jsonPayload []byte, topic string) error {
	msg := &sarama.ProducerMessage{
		Topic: topic,
		Value: sarama.ByteEncoder(jsonPayload),
	}

	// Send message
	_, _, err := producer.SendMessage(msg)
	if err != nil {
		return err
	}

	log.Println("Message sent successfully to Kafka")
	return nil
}
