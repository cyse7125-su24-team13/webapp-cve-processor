package cve

import (
	"encoding/json"
	"errors"
	"log"
	"os"
	"time"
)

// CVERecord represents a CVE record
type CVERecord struct {
	CVEID         string                 `json:"cveId"`
	DatePublished time.Time              `json:"datePublished"`
	DateUpdated   time.Time              `json:"dateUpdated"`
	Data          map[string]interface{} `json:"data"`
}

// ParseCVEFile parses a CVE JSON file and returns a CVERecord
func ParseCVEFile(filePath string) (CVERecord, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return CVERecord{}, err
	}
	defer file.Close()

	var cveData map[string]interface{}
	if err := json.NewDecoder(file).Decode(&cveData); err != nil {
		return CVERecord{}, err
	}

	cveMetadata, ok := cveData["cveMetadata"].(map[string]interface{})
	if !ok {
		return CVERecord{}, errors.New("invalid CVE metadata format")
	}

	cveID, ok := cveMetadata["cveId"].(string)
	if !ok {
		return CVERecord{}, errors.New("invalid CVE ID format")
	}

	datePublishedStr, ok := cveMetadata["datePublished"].(string)
	if !ok {
		return CVERecord{}, errors.New("invalid datePublished format")
	}
	datePublished, err := parseDate(datePublishedStr)
	if err != nil {
		return CVERecord{}, err
	}
	log.Printf("Date Published: %s", datePublished)

	dateUpdatedStr, ok := cveMetadata["dateUpdated"].(string)
	var dateUpdated time.Time
	if ok && dateUpdatedStr != "" {
		dateUpdated, err = parseDate(dateUpdatedStr)
		if err != nil {
			return CVERecord{}, err
		}
		log.Printf("Date Updated: %s", dateUpdated)
	}

	return CVERecord{
		CVEID:         cveID,
		DatePublished: datePublished,
		DateUpdated:   dateUpdated,
		Data:          cveData,
	}, nil
}

// parseDate attempts to parse the date string using multiple layouts
func parseDate(dateStr string) (time.Time, error) {
	const layout1 = "2006-01-02T15:04:05.000Z" // with "Z" suffix
	const layout2 = "2006-01-02T15:04:05.000"  // without "Z" suffix

	date, err := time.Parse(layout1, dateStr)
	if err == nil {
		return date, nil
	}

	date, err = time.Parse(layout2, dateStr)
	if err == nil {
		return date, nil
	}

	return time.Time{}, errors.New("unsupported date format: " + dateStr)
}
