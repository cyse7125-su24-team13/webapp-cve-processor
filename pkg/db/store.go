package db

import (
	"context"
	"encoding/json"
	"log"
	"mycveprocessor/pkg/cve"
	"time"

	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
)

// Check if a CVE record already exists and return its latest version
func getLatestRecord(conn *pgxpool.Pool, cveID string) (bool, time.Time, error) {
	var version time.Time
	query := `
    SELECT version
    FROM cve
    WHERE cve_id = $1
    ORDER BY version DESC
    LIMIT 1;
    `
	err := conn.QueryRow(context.Background(), query, cveID).Scan(&version)
	if err != nil {
		if err == pgx.ErrNoRows {
			return false, time.Time{}, nil
		}
		return false, time.Time{}, err
	}
	return true, version, nil
}

// StoreCVERecord stores or updates a CVE record in the database, ensuring versioning
func StoreCVERecord(conn *pgxpool.Pool, record cve.CVERecord) error {
	exists, latestVersion, err := getLatestRecord(conn, record.CVEID)
	if err != nil {
		log.Printf("Failed to check if record exists: %v\n", err)
		return err
	}

	jsonData, err := json.Marshal(record)
	if err != nil {
		log.Printf("Failed to marshal JSON: %v\n", err)
		return err
	}

	// Determine the version to use
	var version time.Time
	if !record.DateUpdated.IsZero() {
		version = record.DateUpdated
	} else {
		version = record.DatePublished
	}

	// Truncate dates to the same precision (seconds) for accurate comparison
	truncatedRecordVersion := version.Truncate(time.Second)
	truncatedExistingVersion := latestVersion.Truncate(time.Second)

	if exists {
		if truncatedRecordVersion.Equal(truncatedExistingVersion) {
			log.Printf("No update needed for CVE ID %s; version has not changed\n", record.CVEID)
		} else {
			// Update the existing record
			_, err = conn.Exec(context.Background(), `
			UPDATE cve
			SET version = $2, json_data = $3, date_published = $4, date_updated = $5
			WHERE cve_id = $1
			`, record.CVEID, truncatedRecordVersion.Format(time.RFC3339), jsonData, record.DatePublished.Format(time.RFC3339), record.DateUpdated.Format(time.RFC3339))
			if err != nil {
				log.Printf("Failed to update CVE record: %v\n", err)
				return err
			}
			log.Printf("Updated record for CVE ID %s with version %s\n", record.CVEID, truncatedRecordVersion.Format(time.RFC3339))
		}
	} else {
		// Insert a new record
		_, err = conn.Exec(context.Background(), `
        INSERT INTO cve (cve_id, version, json_data, date_published, date_updated)
        VALUES ($1, $2, $3, $4, $5)
        `, record.CVEID, truncatedRecordVersion.Format(time.RFC3339), jsonData, record.DatePublished.Format(time.RFC3339), record.DateUpdated.Format(time.RFC3339))
		if err != nil {
			log.Printf("Failed to store CVE record: %v\n", err)
			return err
		}
		log.Printf("Inserted new record for CVE ID %s with version %s\n", record.CVEID, truncatedRecordVersion.Format(time.RFC3339))
	}

	return nil
}
