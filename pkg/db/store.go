package db

import (
	"context"
	"encoding/json"
	"log"
	"mycveprocessor/pkg/cve"
	"time"

	"github.com/jackc/pgx/v4"
)

// Check if a CVE record already exists and return its dateUpdated
func getExistingRecord(conn *pgx.Conn, cveID string) (bool, time.Time, error) {
	var dateUpdated time.Time
	query := `
    SELECT date_updated
    FROM cve
    WHERE cve_id = $1;
    `
	err := conn.QueryRow(context.Background(), query, cveID).Scan(&dateUpdated)
	if err != nil {
		if err == pgx.ErrNoRows {
			return false, time.Time{}, nil
		}
		return false, time.Time{}, err
	}
	return true, dateUpdated, nil
}

// StoreCVERecord stores or updates a CVE record in the database
func StoreCVERecord(conn *pgx.Conn, record cve.CVERecord) error {
	exists, existingDateUpdated, err := getExistingRecord(conn, record.CVEID)
	if err != nil {
		log.Printf("Failed to check if record exists: %v\n", err)
		return err
	}

	jsonData, err := json.Marshal(record)
	if err != nil {
		log.Printf("Failed to marshal JSON: %v\n", err)
		return err
	}

	// Truncate both dates to the same precision (seconds) for accurate comparison
	truncatedRecordDateUpdated := record.DateUpdated.Truncate(time.Second)
	truncatedExistingDateUpdated := existingDateUpdated.Truncate(time.Second)


	if exists {
		if !truncatedRecordDateUpdated.Equal(truncatedExistingDateUpdated) {
			// Update the existing record
			_, err = conn.Exec(context.Background(), `
            UPDATE cve
            SET json_data = $2, date_published = $3, date_updated = $4
            WHERE cve_id = $1
            `, record.CVEID, jsonData, record.DatePublished.Format(time.RFC3339), truncatedRecordDateUpdated.Format(time.RFC3339))
			if err != nil {
				log.Printf("Failed to update CVE record: %v\n", err)
				return err
			}
			log.Printf("Updated record for CVE ID %s with date updated %s\n", record.CVEID, truncatedRecordDateUpdated.Format(time.RFC3339))
		} else {
			log.Printf("No update needed for CVE ID %s; date updated has not changed\n", record.CVEID)
		}
	} else {
		// Insert a new record
		_, err = conn.Exec(context.Background(), `
        INSERT INTO cve (cve_id, json_data, date_published, date_updated)
        VALUES ($1, $2, $3, $4)
        `, record.CVEID, jsonData, record.DatePublished.Format(time.RFC3339), truncatedRecordDateUpdated.Format(time.RFC3339))
		if err != nil {
			log.Printf("Failed to store CVE record: %v\n", err)
			return err
		}
		log.Printf("Inserted new record for CVE ID %s with date updated %s\n", record.CVEID, truncatedRecordDateUpdated.Format(time.RFC3339))
	}

	return nil
}
